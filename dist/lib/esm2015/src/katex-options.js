/* eslint-disable */
export class KatexOptions {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2F0ZXgtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9zcmMva2F0ZXgtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsTUFBTSxPQUFPLFlBQVk7Q0E4RXhCIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmV4cG9ydCBjbGFzcyBLYXRleE9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgbWF0aCB3aWxsIGJlIHJlbmRlcmVkIGluIGRpc3BsYXkgbW9kZVxuICAgICAqIChtYXRoIGluIGRpc3BsYXkgc3R5bGUgYW5kIGNlbnRlciBtYXRoIG9uIHBhZ2UpXG4gICAgICpcbiAgICAgKiBJZiBgZmFsc2VgLCBtYXRoIHdpbGwgYmUgcmVuZGVyZWQgaW4gaW5saW5lIG1vZGVcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGRpc3BsYXlNb2RlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIEthVGVYIHdpbGwgdGhyb3cgYSBgUGFyc2VFcnJvcmAgd2hlblxuICAgICAqIGl0IGVuY291bnRlcnMgYW4gdW5zdXBwb3J0ZWQgY29tbWFuZCBvciBpbnZhbGlkIExhVGV4XG4gICAgICpcbiAgICAgKiBJZiBgZmFsc2VgLCBLYVRlWCB3aWxsIHJlbmRlciB1bnN1cHBvcnRlZCBjb21tYW5kcyBhc1xuICAgICAqIHRleHQsIGFuZCByZW5kZXIgaW52YWxpZCBMYVRlWCBhcyBpdHMgc291cmNlIGNvZGUgd2l0aFxuICAgICAqIGhvdmVyIHRleHQgZ2l2aW5nIHRoZSBlcnJvciwgaW4gY29sb3IgZ2l2ZW4gYnkgZXJyb3JDb2xvclxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICB0aHJvd09uRXJyb3I/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEEgQ29sb3Igc3RyaW5nIGdpdmVuIGluIGZvcm1hdCBgI1hYWGAgb3IgYCNYWFhYWFhgXG4gICAgICovXG4gICAgZXJyb3JDb2xvcj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBIGNvbGxlY3Rpb24gb2YgY3VzdG9tIG1hY3Jvcy5cbiAgICAgKlxuICAgICAqIFNlZSBgc3JjL21hY3Jvcy5qc2AgZm9yIGl0cyB1c2FnZVxuICAgICAqL1xuICAgIG1hY3Jvcz86IGFueTtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIGBcXGNvbG9yYCB3aWxsIHdvcmsgbGlrZSBMYVRlWCdzIGBcXHRleHRjb2xvcmBcbiAgICAgKiBhbmQgdGFrZXMgMiBhcmd1bWVudHNcbiAgICAgKlxuICAgICAqIElmIGBmYWxzZWAsIGBcXGNvbG9yYCB3aWxsIHdvcmsgbGlrZSBMYVRlWCdzIGBcXGNvbG9yYFxuICAgICAqIGFuZCB0YWtlcyAxIGFyZ3VtZW50XG4gICAgICpcbiAgICAgKiBJbiBib3RoIGNhc2VzLCBgXFx0ZXh0Y29sb3JgIHdvcmtzIGFzIGluIExhVGVYXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGNvbG9ySXNUZXh0Q29sb3I/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFsbCB1c2VyLXNwZWNpZmllZCBzaXplcyB3aWxsIGJlIGNhcGVkIHRvIGBtYXhTaXplYCBlbXNcbiAgICAgKlxuICAgICAqIElmIHNldCB0byBJbmZpbml0eSwgdXNlcnMgY2FuIG1ha2UgZWxlbWVudHMgYW5kIHNwYWNlXG4gICAgICogYXJiaXRyYXJpbHkgbGFyZ2VcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IEluZmluaXR5XG4gICAgICovXG4gICAgbWF4U2l6ZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBMaW1pdCB0aGUgbnVtYmVyIG9mIG1hY3JvIGV4cGFuc2lvbnMgdG8gc3BlY2lmaWVkIG51bWJlclxuICAgICAqXG4gICAgICogSWYgc2V0IHRvIGBJbmZpbml0eWAsIG1hcmNvIGV4cGFuZGVyIHdpbGwgdHJ5IHRvIGZ1bGx5IGV4cGFuZFxuICAgICAqIGFzIGluIExhVGV4XG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAxMDAwXG4gICAgICovXG4gICAgbWF4RXhwYW5kPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEFsbG93ZWQgcHJvdG9jb2xzIGluIGBcXGhyZWZgXG4gICAgICpcbiAgICAgKiBVc2UgYF9yZWxhdGl2ZWAgdG8gYWxsb3cgcmVsYXRpdmUgdXJsc1xuICAgICAqXG4gICAgICogVXNlIGAqYCB0byBhbGxvdyBhbGwgcHJvdG9jb2xzXG4gICAgICovXG4gICAgYWxsb3dlZFByb3RvY29scz86IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIElmIGBmYWxzZWAgb3IgYFwiaWdub3JlXCJgLCBhbGxvdyBmZWF0dXJlcyB0aGF0IG1ha2VcbiAgICAgKiB3cml0aW5nIGluIExhVGV4IGNvbnZlbmllbnQgYnV0IG5vdCBzdXBwb3J0ZWQgYnkgTGFUZXhcbiAgICAgKlxuICAgICAqIElmIGB0cnVlYCBvciBgXCJlcnJvclwiYCwgdGhyb3cgYW4gZXJyb3IgZm9yIHN1Y2ggdHJhbnNncmVzc2lvbnNcbiAgICAgKlxuICAgICAqIElmIGBcIndhcm5cImAsIHdhcm4gYWJvdXQgYmVoYXZpb3IgdmlhIGBjb25zb2xlLndhcm5gXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBcIndhcm5cIlxuICAgICAqL1xuICAgIHN0cmljdD86IGJvb2xlYW4gfCBzdHJpbmcgfCBGdW5jdGlvbjtcbn1cbiJdfQ==